{"filter":false,"title":"removeKFromList.go","tooltip":"/codesignal/interview/removeKFromList.go","undoManager":{"mark":34,"position":34,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["p"],"id":1}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["a"],"id":2}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["c"],"id":3}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["k"],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":4},"action":"remove","lines":["pack"],"id":5},{"start":{"row":0,"column":0},"end":{"row":0,"column":7},"action":"insert","lines":["package"]}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":[" "],"id":6}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["m"],"id":7}],[{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["a"],"id":8}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["i"],"id":9}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["n"],"id":10}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":12},"action":"remove","lines":["main"],"id":11},{"start":{"row":0,"column":8},"end":{"row":0,"column":12},"action":"insert","lines":["main"]}],[{"start":{"row":0,"column":12},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":12}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":13}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["i"],"id":14}],[{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["m"],"id":15}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":2},"action":"remove","lines":["im"],"id":16},{"start":{"row":2,"column":0},"end":{"row":2,"column":6},"action":"insert","lines":["import"]}],[{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":[" "],"id":17}],[{"start":{"row":2,"column":7},"end":{"row":2,"column":9},"action":"insert","lines":["''"],"id":18}],[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"remove","lines":["'"],"id":19}],[{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"remove","lines":["'"],"id":20}],[{"start":{"row":2,"column":7},"end":{"row":2,"column":9},"action":"insert","lines":["\"\""],"id":21}],[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["f"],"id":22}],[{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["m"],"id":23}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["t"],"id":24}],[{"start":{"row":2,"column":12},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":25}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":26}],[{"start":{"row":4,"column":0},"end":{"row":42,"column":12},"action":"insert","lines":["func removeKFromList(l *ListNode, k int) *ListNode {","    if l == nil{","        return l","    }","    ","    for l1 := l; l1 != nil; l1 = l1.Next{","        if (l1.Value == k && l1.Next != nil){","            l1 = l1.Next","        }","        ","    }","    ","    for l1 := l; l1 != nil; l1 = l1.Next{","        fmt.Println(l1.Value)","    }","    ","    ","    ","   /* ","    l1 := l","    ","    if(l1.Value == k){","        l1 = l1.Next","        //return l1","    }","    ","    for l1.Next != nil{","        if(l1.Next.Value == k ){","            l1.Next = l1.Next.Next","        }","        ","        l1 = l1.Next","    }","    ","    return l","    ","  */","    ","   return l "],"id":27}],[{"start":{"row":42,"column":12},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":28},{"start":{"row":43,"column":0},"end":{"row":43,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":43,"column":3},"end":{"row":44,"column":0},"action":"insert","lines":["",""],"id":29},{"start":{"row":44,"column":0},"end":{"row":44,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":44,"column":3},"end":{"row":45,"column":0},"action":"insert","lines":["",""],"id":30},{"start":{"row":45,"column":0},"end":{"row":45,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":45,"column":3},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":31},{"start":{"row":46,"column":0},"end":{"row":46,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":46,"column":3},"end":{"row":99,"column":0},"action":"insert","lines":["var root = new(ListNode)","","func removeKFromList(l *ListNode, k int) *ListNode {","    root = nil","    if l == nil{","        return l","    }","    ","   // var numArry []int","    ","    fmt.Println(\"this is root\", root)","    ","    for l1 := l; l1 != nil; l1 = l1.Next{","        if(l1.Value != k){","            op1, _ := l1.Value.(int)","            ","           // numArry = append(numArry,op1)","           // ","            test1 := addNode(root,op1)","            test1 = test1 + 5","        }","    }","    ","    //fmt.Println(numArry)","    ","    /*","    for _,x:= range numArry{","        test1 := addNode(root,x)","        test1 = test1 + 3","    }","    */","    ","    ","   ","    ","   return root ","    ","}","","func addNode(t *ListNode, v int) int{","    if root == nil{","        t = &ListNode{v,nil}","        root = t","        return 0","    }","    ","    if(t.Next == nil){","        t.Next = &ListNode{v,nil}","        return -2","    }","    ","    return addNode(t.Next, v)","}",""],"id":32}],[{"start":{"row":0,"column":0},"end":{"row":99,"column":0},"action":"remove","lines":["package main","","import \"fmt\"","","func removeKFromList(l *ListNode, k int) *ListNode {","    if l == nil{","        return l","    }","    ","    for l1 := l; l1 != nil; l1 = l1.Next{","        if (l1.Value == k && l1.Next != nil){","            l1 = l1.Next","        }","        ","    }","    ","    for l1 := l; l1 != nil; l1 = l1.Next{","        fmt.Println(l1.Value)","    }","    ","    ","    ","   /* ","    l1 := l","    ","    if(l1.Value == k){","        l1 = l1.Next","        //return l1","    }","    ","    for l1.Next != nil{","        if(l1.Next.Value == k ){","            l1.Next = l1.Next.Next","        }","        ","        l1 = l1.Next","    }","    ","    return l","    ","  */","    ","   return l ","   ","   ","   ","   var root = new(ListNode)","","func removeKFromList(l *ListNode, k int) *ListNode {","    root = nil","    if l == nil{","        return l","    }","    ","   // var numArry []int","    ","    fmt.Println(\"this is root\", root)","    ","    for l1 := l; l1 != nil; l1 = l1.Next{","        if(l1.Value != k){","            op1, _ := l1.Value.(int)","            ","           // numArry = append(numArry,op1)","           // ","            test1 := addNode(root,op1)","            test1 = test1 + 5","        }","    }","    ","    //fmt.Println(numArry)","    ","    /*","    for _,x:= range numArry{","        test1 := addNode(root,x)","        test1 = test1 + 3","    }","    */","    ","    ","   ","    ","   return root ","    ","}","","func addNode(t *ListNode, v int) int{","    if root == nil{","        t = &ListNode{v,nil}","        root = t","        return 0","    }","    ","    if(t.Next == nil){","        t.Next = &ListNode{v,nil}","        return -2","    }","    ","    return addNode(t.Next, v)","}",""],"id":33}],[{"start":{"row":0,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["// Definition for singly-linked list:","// type ListNode struct {","//   Value interface{}","//   Next *ListNode","// }","//","func removeKFromList(l *ListNode, k int) *ListNode {","    h := &ListNode{}","    h.Next = l","    l = h","    for l.Next != nil {","         if l.Next.Value == k {","            l.Next = l.Next.Next","         } else {","            l = l.Next","         }","","    }","    return h.Next","}",""],"id":34}],[{"start":{"row":0,"column":0},"end":{"row":20,"column":0},"action":"remove","lines":["// Definition for singly-linked list:","// type ListNode struct {","//   Value interface{}","//   Next *ListNode","// }","//","func removeKFromList(l *ListNode, k int) *ListNode {","    h := &ListNode{}","    h.Next = l","    l = h","    for l.Next != nil {","         if l.Next.Value == k {","            l.Next = l.Next.Next","         } else {","            l = l.Next","         }","","    }","    return h.Next","}",""],"id":35},{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["// Definition for singly-linked list:","// type ListNode struct {","//   Value interface{}","//   Next *ListNode","// }","//","","","","func removeKFromList(l *ListNode, k int) *ListNode {","   x := l","   var prev = new(ListNode)","   prev = nil","   ","   for x != nil{","       x_next := x.Next","       if(x.Value == k) {","               if(prev != nil) {","                  prev.Next = x_next;","               } else {","                  l = x_next;","               }","            } else {","               prev = x;","            }","            x = x_next;","         }","      return l ","   }","","",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":28,"column":4},"end":{"row":28,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1538340816203,"hash":"cd1144e13523d21abfc46bfceb77ab004a8d35cc"}